// For Login
DROP PROCEDURE IF EXISTS `loginWithUsername`;
DELIMITER //
CREATE PROCEDURE `loginWithUsername`(IN `iUsername` VARCHAR(150), IN `iPassword` VARCHAR(150))
BEGIN
SELECT U.*, UA.*
FROM `SCP_UserLogin` AS U
INNER JOIN `SCP_UserAccess` AS UA ON UA.UserID=U.UserID
WHERE U.UserName=iUsername AND U.Password= iPassword;
END//
DELIMITER ;

// For Create an client enquiry
DELIMITER //
CREATE PROCEDURE `createEnquiry`(IN `iOrgID` varchar(150),IN `iCustomerTitle` varchar(150),IN `iCustomerName` varchar(150),IN `iCustomerSurname` varchar(150),IN `iCustomerMiddleName` varchar(150),IN `iDateOfBirth` varchar(40),IN `iNHSNumber` varchar(150),IN `iGender` varchar(40),IN `iEthnicity` varchar(150),IN `iAddress1` varchar(150),IN `iAddress2` varchar(150),IN `iPostCode` varchar(9),IN `iCity` varchar(150),IN `iLandline` varchar(150),IN `iContactNo` varchar(150),IN `iOtherDetails` varchar(150),IN `iCareInfo` varchar(150),IN `iOutcomesInfo` varchar(150),IN `iSupportInfo` varchar(150),IN `iMakeEnq` varchar(150),IN `iRightsID` int(11), IN `iAccessLevelID` int(11),IN `iUserTypeID` int(11),`iCreatedDateTime` datetime,`iModifyDateTime` datetime,`iStatusID` int(11))
BEGIN
DECLARE UID int;
insert into SCP_UserLogin (StatusID,CreatedDateTime,ModifyDateTime) values (iStatusID,iCreatedDateTime,iModifyDateTime);
SET UID = LAST_INSERT_ID();
insert into SCP_UserAccess (RightsID,AccessLevelID,UserID,UserTypeID,CreatedDateTime,ModifyDateTime,StatusID) values (iRightsID,iAccessLevelID,UID,iUserTypeID,iCreatedDateTime,iModifyDateTime,iStatusID);

insert into SCP_Customer (CustomerTitle,CustomerName,CustomerSurname,CustomerMiddleName,DateOfBirth,NHSNumber,Gender,Ethnicity,Address1,Address2,PostCode,City,Landline,ContactNo,OtherDetails,CareInfo,OutcomesInfo,SupportInfo,MakeEnq,UserID,StatusID,CreatedDateTime,ModifyDateTime) values (iCustomerTitle,iCustomerName,iCustomerSurname,iCustomerMiddleName,iDateOfBirth,iNHSNumber,iGender,iEthnicity,iAddress1,iAddress2,iPostCode,iCity,iLandline,iContactNo,iOtherDetails,iCareInfo,iOutcomesInfo,iSupportInfo,iMakeEnq,UID,iStatusID,iCreatedDateTime,iModifyDateTime);
SET UID = LAST_INSERT_ID();
insert into SCP_Enquiry (OrgID,CustomerID,StatusID,CreatedDateTime,ModifyDateTime) values (iOrgID,UID,iStatusID,iCreatedDateTime,iModifyDateTime);
END//
DELIMITER ;

// For Load all forms of organisaers
DROP PROCEDURE IF EXISTS `loadAllOrgniserForms`;
DELIMITER //
CREATE PROCEDURE `loadAllOrgniserForms`(IN `iOrgID` INT(11), IN `iUserTypeID` INT(11))
BEGIN
SELECT *
FROM `SCP_OrgFormBuilder`
WHERE OrgID=iOrgID AND StatusID=1 AND UserTypeID=iUserTypeID;
END//
DELIMITER ;

// For Load all forms
DROP PROCEDURE IF EXISTS `loadAllForms`;
DELIMITER //
CREATE PROCEDURE `loadAllForms`(IN `iUserTypeID` INT(11))
BEGIN
SELECT *
FROM `SCP_FormBuilder`
WHERE StatusID=1 AND UserTypeID=iUserTypeID;
END//
DELIMITER ;

// For get data with form api
DROP PROCEDURE IF EXISTS `getFormWithdataByFormDataIDAndUserID`;
DELIMITER //
CREATE  PROCEDURE `getFormWithdataByFormDataIDAndUserID`(in iOrgID int(11), in iUserTypeID int(11), in iFormDataID varchar(156))
BEGIN
    IF EXISTS(select * from `SCP_OrgFormBuilder` where OrgID = iOrgID and UserTypeID = iUserTypeID and FormDataID = iFormDataID) then 
        select * from `SCP_OrgFormBuilder` where OrgID = iOrgID and UserTypeID = iUserTypeID and FormDataID = iFormDataID;
    ELSE 
        select * from `SCP_FormBuilder` where UserTypeID = iUserTypeID and FormDataID = iFormDataID;
    END IF;
END //
DELIMITER ;



// For insert data in to form api
DROP PROCEDURE IF EXISTS `insertDynamicFormData`;
DELIMITER //
CREATE  PROCEDURE `insertDynamicFormData`(in iFormValueData longtext,in iUserID int(11),in iCustomerID int(11),in iFormDataID varchar(156),in iStatusID int(11),in iCreatedDateTime datetime, in iModifyDateTime datetime)
BEGIN
    IF EXISTS(select * from `SCP_OrgFormBuilderDataAction` where CustomerID = iCustomerID and FormDataID = iFormDataID) then 
        update SCP_OrgFormBuilderDataAction
        set  FormValueData= iFormValueData, UserID=iUserID, ModifyDateTime=iModifyDateTime
        where  CustomerID = iCustomerID and FormDataID = iFormDataID;
    ELSE 
        insert into `SCP_OrgFormBuilderDataAction`(FormValueData,UserID,CustomerID,FormDataID,StatusID,CreatedDateTime,ModifyDateTime)         values(iFormValueData,iUserID,iCustomerID,iFormDataID,iStatusID,iCreatedDateTime,iModifyDateTime);
    END IF;
    select * from `SCP_OrgFormBuilderDataAction` where CustomerID = iCustomerID and FormDataID = iFormDataID;
END //
DELIMITER ;



// For Load all countries
DELIMITER //
CREATE PROCEDURE `loadAllCountry`()
BEGIN
SELECT *
FROM `SCP_Country`;
END//
DELIMITER ;


// For Create staff
DROP PROCEDURE IF EXISTS `createStaff`;
DELIMITER //
CREATE PROCEDURE `createStaff`(IN `iEmailID` varchar(150),IN `iOrgID` int(11),IN `iTitle` varchar(150),IN `iName` varchar(150),IN `iSurname` varchar(150),IN `iMiddleName` varchar(150),IN `iDateOfBirth` varchar(40),IN `iGender` varchar(40),IN `iEthnicity` varchar(40),IN `iHouseNumber` varchar(150),IN `iAddress1` varchar(150),IN `iAddress2` varchar(150),IN `iCity` varchar(9),IN `iCountry` varchar(150),IN `iPostCode` varchar(9),IN `iMobile` varchar(150),IN `iProfilePhoto` varchar(256),IN `iNOKName` varchar(150),IN `iNOKMobile` varchar(150),IN `iNOKEmail` varchar(150),IN `iUserName` varchar(150),IN `iPassword` varchar(150),IN `iRightsID` int(11), IN `iAccessLevelID` int(11),IN `iUserTypeID` int(11),`iCreatedDateTime` datetime,`iModifyDateTime` datetime,`iStatusID` int(11),`iLicenseID` int(11))
BEGIN
DECLARE UID int;
DECLARE UserAccessID int;

insert into SCP_UserLogin (EmailID,UserName,Password,ProfilePhoto,StatusID,CreatedDateTime,ModifyDateTime) values (iEmailID,iUserName,iPassword,iProfilePhoto,iStatusID,iCreatedDateTime,iModifyDateTime);
SET UID = LAST_INSERT_ID();
insert into SCP_UserAccess (RightsID,AccessLevelID,UserID,UserTypeID,CreatedDateTime,ModifyDateTime,StatusID) values (iRightsID,iAccessLevelID,UID,iUserTypeID,iCreatedDateTime,iModifyDateTime,iStatusID);
SET UserAccessID = LAST_INSERT_ID();

insert into SCP_Staff (Title,Name,Surname,MiddleName,DateOfBirth,Gender,Ethnicity,HouseNumber,Address1,Address2,City,Country,PostCode,Mobile,	ProfilePhoto,NOKName,NOKMobile,NOKEmail,OrgID,UserAccessID,LicenseID,UserID,StatusID,CreatedDateTime,ModifyDateTime) values (iTitle,iName,iSurname,iMiddleName,iDateOfBirth,iGender,iEthnicity,iHouseNumber,iAddress1,iAddress2,iCity,iCountry,iPostCode,iMobile,	iProfilePhoto,iNOKName,iNOKMobile,iNOKEmail,iOrgID,UserAccessID,iLicenseID,UID,iStatusID,iCreatedDateTime,iModifyDateTime);

update SCP_Licenses SET OrgID=iOrgID,UserID=UID where LicenseID=iLicenseID;

END//
DELIMITER ;



// For all staff
DROP PROCEDURE IF EXISTS `loadStaff`;
DELIMITER //
CREATE PROCEDURE `loadStaff`(IN `iOrgID` int(11),IN `iArchiveUser` int(11))
BEGIN
SELECT st.*
FROM `SCP_Staff` as st
INNER JOIN `SCP_UserLogin` as ulogin ON st.UserID=ulogin.UserID 
WHERE st.OrgID=iOrgID and st.ArchiveUser=iArchiveUser;
END//
DELIMITER ;


// For all care workers and customers
DROP PROCEDURE IF EXISTS `getRosterClientDataByDate`;
DELIMITER //
CREATE PROCEDURE `getRosterClientDataByDate`(IN `iDate` datetime, IN `iOrgID` INT(11))
BEGIN
SELECT C.*
FROM `SCP_Customer` as C
INNER JOIN `SCP_Enquiry` as E ON E.CustomerID=C.CustomerID
WHERE E.OrgID=iOrgID AND E.StatusID=1;
END//
DELIMITER ;

DROP PROCEDURE IF EXISTS `getRosterCareWorkerDataByDate`;
DELIMITER //
CREATE PROCEDURE `getRosterCareWorkerDataByDate`(IN `iDate` datetime, IN `iOrgID` INT(11))
BEGIN
SELECT *
FROM SCP_Staff
WHERE OrgID=iOrgID AND StatusID=1;
END//
DELIMITER ;


DROP PROCEDURE IF EXISTS `SP_DeleteFileInfo`;
DELIMITER //
CREATE  PROCEDURE `SP_DeleteFileInfo`(IN pFileID int)
BEGIN
    Set @FileRef= null;
    select filesinfo.ReferenceID into @FileRef FROM filesinfo where filesinfo.FileID =pFileID;
    DELETE From filesinfo WHERE filesinfo.FileID= pFileID;
    IF EXISTS(SELECT * from filesrefrences where filesrefrences.ReferenceID= @FileRef and filesrefrences.RefrenceCount>1) then 
        update filesrefrences
        set  filesrefrences.RefrenceCount= filesrefrences.RefrenceCount-1
        where  filesrefrences.ReferenceID= @FileRef;
        SELECT @FileRef;
    ELSE 
        IF(@FileRef is Not NULL) THEN
            DELETE from filesrefrences WHERE filesrefrences.ReferenceID = @FileRef;
            SELECT -77;
        ELSE
            SELECT -99;
        END IF;
    END IF;
END //
DELIMITER ;
